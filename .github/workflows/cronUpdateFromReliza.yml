on:
  repository_dispatch:
    types: [reliza-build-event]

name: Pull versions from Reliza and obtain k8s definitions if changed

# BUILD_ENV_PARAMS secret must be created in the format 
# --env TEST|k8s_test,--env PRODUCTION --instance fc87512a-983c-4127-8f5f-2f876a0f1b76 --namespace default|k8s_production
# (different variations are comma separaed, instance and namespace are optional, output directory follows vertical bar | separator)

# INDIRECTORY secret must be set to the directory containing base definitions, i.e. k8s_templates

jobs:
  update:
    name: Update
    runs-on: ubuntu-latest
    env:
      BUILD_ENV_PARAMS: ${{ secrets.BUILD_ENV_PARAMS }}
      INDIRECTORY: ${{ secrets.INDIRECTORY }}
      RELIZA_API_ID: ${{ secrets.RELIZA_ORGANIZATION_API_ID }}
      RELIZA_API_KEY: ${{ secrets.RELIZA_ORGANIZATION_API_KEY }}
      RELIZA_HUB_URI: ${{ secrets.RELIZA_HUB_URI }}
      HELM_PROJECT_API_ID: ${{ secrets.HELM_PROJECT_API_ID }}
      HELM_PROJECT_API_KEY: ${{ secrets.HELM_PROJECT_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Helm script
        run: |
          echo -n sha256: > digest_file
          dir=helm; find "$dir" -type f -exec sha256sum {} \; | sed "s~$dir~~g" | sort -d | sha256sum | cut -d ' ' -f 1 >> digest_file
          echo Initial Digest:
          cat digest_file
          # call reliza and see if this file system artifact was already registered before
          docker run --rm relizaio/reliza-cli checkhash \
          -u $RELIZA_HUB_URI \
          -i $HELM_PROJECT_API_ID \
          -k $HELM_PROJECT_API_KEY \
          --hash $(cat digest_file) > reliza_helm_check 2>&1

          echo "Response from Reliza:"
          reliza_helm_check=$(cat reliza_helm_check)
          echo $reliza_helm_check
          rm digest_file
          rm reliza_helm_check
          # little sleep is needed to make sure we calculate if condition correctly
          sleep 5

          # now only create new release if no release was found with same hash
          if [ "$reliza_helm_check" == "{}" ]
          then
            
            # obtain version
            RLZ_VER_JSON=$(docker run --rm relizaio/reliza-cli getversion -u $RELIZA_HUB_URI -i $HELM_PROJECT_API_ID -k $HELM_PROJECT_API_KEY -b $GITHUB_REF)
            echo "reliza version json found: $RLZ_VER_JSON"
            RLZ_FULL_VER=$(echo $RLZ_VER_JSON | docker run -i --rm relizaio/jq -r ".version")
            echo "RLZ_FULL_VER = $RLZ_FULL_VER"

            # now inject new version into the chart and commit and push
            sed -i "/version: /s/.*/version: $RLZ_FULL_VER/" $GITHUB_WORKSPACE/helm/Chart.yaml

            echo "committing"
            git config --global user.name 'reliza-auto'
            git config --global user.email 'info@reliza.io'
            git add .
            git commit -m "fix: auto version increment for Mafia helm chart based on Reliza Hub details"
            git push

            # Push The Chart now
            docker pull registry.test.relizahub.com/library/helm:latest
            docker run --rm -v $GITHUB_WORKSPACE/helm:/apps/mafia registry.test.relizahub.com/library/helm push mafia $CHART_REPO_URL -u $CHART_REPO_USERNAME -p $CHART_REPO_PASSWORD
            
            # since we just incremented version we need to recompute digest

            echo -n sha256: > digest_file
            dir=helm; find "$dir" -type f -exec sha256sum {} \; | sed "s~$dir~~g" | sort -d | sha256sum | cut -d ' ' -f 1 >> digest_file
            echo New Digest: 
            cat digest_file

            # Construct Reliza command to stream version to reliza
            echo -n " -u $RELIZA_HUB_URI -i $HELM_PROJECT_API_ID -k $HELM_PROJECT_API_KEY " >> reliza_command
            echo -n "--artid mafia-helm-chart-$RLZ_FULL_VER " >> reliza_command
            echo -n "--artbuildid github$GITHUB_ACTION$commit_sha " >> reliza_command
            echo -n "--artcimeta GitHub Actions " >> reliza_command
            echo -n "--arttype file " >> reliza_command
            echo -n "--artdigests $(cat digest_file) " >> reliza_command
            echo -n "--datestart $BUILD_START " >> reliza_command
            echo -n "--dateend $(date -Iseconds) " >> reliza_command
            echo -n "-b $GITHUB_REF --vcstype git --commit $commit_sha --vcsuri github.com/$GITHUB_REPOSITORY --date $(git log -1 --date=iso-strict --pretty='%ad') -v $RLZ_FULL_VER" >> reliza_command
            cat reliza_command
            # send version to reliza
            echo "sending version to reliza"
            docker run --rm relizaio/reliza-cli addrelease $(cat reliza_command)
            exit_status=$(echo $?)
            if [ $exit_status -ne 0 ];then echo "error on submitting metadata to Reliza Hub, failing build"; fi
            if [ $exit_status -ne 0 ];then exit 1; fi
          else
            echo "Artifact is already part of another release, not duplicating reliza hub chart release"
          fi
      - name: Update definitions based on Reliza Hub data
        run: |
          IFS="," read -ra ENV_BUILDS <<< "$BUILD_ENV_PARAMS"
          for envbuild in "${ENV_BUILDS[@]}"; do
            # chmod 0777 $GITHUB_WORKSPACE/${SPLIT_BUILD_ENV[1]}
            IFS="|" read -ra SPLIT_BUILD_ENV <<< "$envbuild"
            docker run --rm -u root -v $GITHUB_WORKSPACE/$INDIRECTORY/:/indir -v $GITHUB_WORKSPACE/${SPLIT_BUILD_ENV[1]}/:/outdir relizaio/reliza-cli parsetemplate -i $RELIZA_API_ID -k $RELIZA_API_KEY ${SPLIT_BUILD_ENV[0]}
          done
      - name: Check if the change happened and commit
        run: |
          cd $GITHUB_WORKSPACE
          git status
          lines=$(git status -s | wc -l)
          if [ $lines -gt 0 ];then
            echo "committing"
            git config --global user.name 'reliza-auto'
            git config --global user.email 'info@reliza.io'
            git add .
            git commit -m "fix: auto-update of deployment based on Reliza Hub details"
            git push
            commit_sha=$(git log -1 --pretty='%H')
            # Generate version and stream version to Reliza Hub
            # get version
            docker run --rm relizaio/reliza-cli getversion -k ${{ secrets.RELIZA_API_KEY }} -i ${{ secrets.RELIZA_API_ID }} -b $GITHUB_REF --metadata GitHub > full_version_output 2>&1
            # show reliza command output in case there is error
            cat full_version_output
            # now construct actual version - we could use jq, but why install another tool in CI env?
            cat full_version_output | grep version | cut -d ':' -f 2 | cut -d '"' -f 2 > version
            vvar=$(cat version)
            # Construct Reliza command to stream version to reliza
            echo -n "--artid github.com/$GITHUB_REPOSITORY " >> reliza_command
            echo -n "--artbuildid github$GITHUB_ACTION$commit_sha " >> reliza_command
            echo -n "--artbuilduri https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID " >> reliza_command
            echo -n "--artcimeta GitHub Actions " >> reliza_command
            echo -n "--arttype file " >> reliza_command
            echo -n "--artdigests sha1:$commit_sha " >> reliza_command
            echo -n "-b $GITHUB_REF --vcstype git --commit $commit_sha -k ${{ secrets.RELIZA_API_KEY }} -i ${{ secrets.RELIZA_API_ID }} --vcsuri github.com/$GITHUB_REPOSITORY \
              -v $vvar" >> reliza_command
            cat reliza_command
            # send version to reliza
            docker run --rm relizaio/reliza-cli addrelease $(cat reliza_command)
          else
            echo "no change, nothing to commit"
          fi